<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[陌上]]></title>
  <subtitle><![CDATA[Life is short, play more.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://treylin.me/"/>
  <updated>2016-11-06T07:06:17.000Z</updated>
  <id>https://treylin.me/</id>
  
  <author>
    <name><![CDATA[Zetao Lin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[靠近？]]></title>
    <link href="https://treylin.me/2016/10/24/Close/"/>
    <id>https://treylin.me/2016/10/24/Close/</id>
    <published>2016-10-24T06:24:44.000Z</published>
    <updated>2016-11-06T07:06:17.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xng37.com1.z0.glb.clouddn.com/DSCF2409-Edit-4%20copy.jpg" alt="">  </p>
<p>卡帕说过：如果你拍得不够好，那是因为你离得不够近。  </p>
<p>周末，在步行穿越一个拥堵的，没有斑马线的路口时，我拍下了园林卡车上的一位工人妇女。她有点蜷缩，探出头，身边是刚从路边树木上修剪下来的枝叶。对于我的接近，以及随后的拍摄动作，她的表情给出了反应：警惕，皱眉。我离得很近，同时也破坏了原有的画面：她略带忧虑的眼神望着远方。</p>
<p>回来把照片导入电脑，屏幕大了，再看，她的表情就更加明显了。</p>
<p>离得近，确实能使照片更加有张力，更有吸引力，细节更明显，但在被摄对象察觉到你的镜头时，也就对原有画面有所破坏了。不能忠实地还原，那纪实摄影，街头拍摄，是否还有意义呢？  </p>
<p>&quot;I&#39;m sort of a spy&quot;，Vivian Maier 在被人问到她是做什么的时候如是回答。不无道理，作为一个好的人间窥探者，「间谍」一词，也许再合适不过。你需要适当地融入，又能在适当的时机抽身，以记录那些独一无二的瞬间。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xng37.com1.z0.glb.clouddn.com/DSCF2409-Edit-4%20copy.jpg" alt="">  </p>
<p>卡帕说过：如果你拍得不够好，那是因为你离得不够近。  </p>
<p>周末，在步行穿越一]]>
    </summary>
    
      <category term="Street" scheme="https://treylin.me/tags/Street/"/>
    
      <category term="Streetphotography" scheme="https://treylin.me/tags/Streetphotography/"/>
    
      <category term="photography" scheme="https://treylin.me/tags/photography/"/>
    
      <category term="摄影" scheme="https://treylin.me/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="街头" scheme="https://treylin.me/tags/%E8%A1%97%E5%A4%B4/"/>
    
      <category term="街拍" scheme="https://treylin.me/tags/%E8%A1%97%E6%8B%8D/"/>
    
      <category term="Thinking" scheme="https://treylin.me/categories/Thinking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[走来走去，在街头相遇]]></title>
    <link href="https://treylin.me/2016/06/30/%E8%B5%B0%E6%9D%A5%E8%B5%B0%E5%8E%BB-review/"/>
    <id>https://treylin.me/2016/06/30/走来走去-review/</id>
    <published>2016-06-30T13:45:54.000Z</published>
    <updated>2016-10-24T15:13:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>我真喜欢那些诚实的小照片儿啊，因为那些画面里有我们每个人鱼水难离的中国式生活，吞吞吐吐的人世间所有无可抗拒的温暖和艰辛。    </p>
</blockquote>
<p>我觉得马良老师的这句话写得极为恰如其分，于是摘出来。阅读这书的同时，也想起了一句广告语，我觉得用在这里也合适：“每次攝影, 都是一次「相遇」。”  </p>
<p>在这本诚意满满的书里，刘涛，一个自来水厂的抄表工，在合肥的街头，与市井平民相遇，与肥硕的保安相遇，与倒地的老人相遇，与小猫小狗相遇...... 而在我看来，作为一个街头拍摄爱好者，他，更是在与自己相遇，那个真实的自己。那个惧怕领导，到街上却能与追逐他的流浪汉坐下来聊天的刘涛；那个起初厌烦这份工作，后来却说多给钱都不换工作的刘涛；那个怕被外在影响，删除微信好友，而后又加回来一些的刘涛；那个因为被领导奖励了一万元而兴奋高兴的刘涛；当然，还有那个，希望刘小米（刘涛女儿）能放飞想象力的刘涛。  </p>
<p>在他的作品里，幽默成份应该是占比重最大的一部分，这其中，有他口中的“冷幽默”，也有“黄色幽默”。也有一些瞬间，给人荒诞之感，而这些，都是刘涛在他穿街走巷时真实地抓拍，这一幕幕都真实地存在过，发生过。给荒诞平添了几分真实。王小波有过这么一句话：“真实有一种真实的荒诞性。”  </p>
<p>我也是个摄影爱好者，钟情街头摄影这个类别。在我的经验里，拍摄者个人的心境，对最后呈现的作品，是有决定性影响的。有段时间，工作到了比较繁忙的一个阶段，周末难得有一天可以休息，这时候，心其实不静，在街上，会发觉好像没有那么多有趣的瞬间。但，街道还是那些街道，人来人往依旧汹涌，是你的心境阻挡了你的眼睛，和你按下快门的手指。我想，不具备一个安静沉稳的心境，刘涛是呈现不出这么多有趣的画面的。“知足”，刘涛在书中说到了自己的心态。  </p>
<p>书中也有篇幅说到了合肥的部分历史。读下来，感觉合肥应该是一个节奏不紧不慢，宜居的城市。和刘涛的照片这么连着看，会感觉照片和文字都是合理的。我在广州拍的一些照片里，发觉大家都是来去匆匆，也时常人山人海。不同地方，不同氛围，也就出不同的照片吧。  </p>
<p>仔细阅读了书中 Lens 对他的采访，也在视频网站上看了电视台对他的采访，对他的认识，逐步加深，到最后，尽然冒出这样自私的想法：刘涛要是能一辈子在街头抄表，一辈子在街头拍摄，不为外界的诱惑所动，那该有多好啊！  </p>
<p>祝刘涛顺利，也祝刘小米快高长大。:-)  </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>我真喜欢那些诚实的小照片儿啊，因为那些画面里有我们每个人鱼水难离的中国式生活，吞吞吐吐的人世间所有无可抗拒的温暖和艰辛。    </p>
</blockquote>
<p>我觉得马良老师的这句话写得极为恰如其分，于是摘出来。阅读这书的同时，也想起了]]>
    </summary>
    
      <category term="Photography" scheme="https://treylin.me/tags/Photography/"/>
    
      <category term="Street" scheme="https://treylin.me/tags/Street/"/>
    
      <category term="book review" scheme="https://treylin.me/tags/book-review/"/>
    
      <category term="书评" scheme="https://treylin.me/tags/%E4%B9%A6%E8%AF%84/"/>
    
      <category term="摄影" scheme="https://treylin.me/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="街头" scheme="https://treylin.me/tags/%E8%A1%97%E5%A4%B4/"/>
    
      <category term="Books" scheme="https://treylin.me/categories/Books/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014, then 2015]]></title>
    <link href="https://treylin.me/2015/01/03/2014-in-review/"/>
    <id>https://treylin.me/2015/01/03/2014-in-review/</id>
    <published>2015-01-03T14:15:19.000Z</published>
    <updated>2015-01-03T14:32:36.000Z</updated>
    <content type="html"><![CDATA[<p>这一年，如果要用什么词汇来概括一下的话，恐怕只有忙碌二字最为恰当了吧。忙毕业，忙工作。这一年到目前这一刻为止，接触的项目有 4 个，其中有 3 个是从零开始的做起的。工作量很大，时间都很赶，因为公司有所谓战略，要抢一个时间点。这能理解，但就目前的收效来看，都并不是非常理想。这个给开发的质量也带来了不良影响，因为要快，我们的某些代码质量不高，这不是我期望的状态。因为工作的忙绿，也差点耽误了自己的毕业论文。同事生哥还几次问我论文交了没有，比我自己还着急。好在，顺利毕业。  </p>
<p>从大量的编码工作中，成长得也算挺快，但同时成长的质量并不是特别好。大部分的时间，都是在赶工的状态，功能实现了，效果有了，基本就是接下去一个模块一个功能了，从某个方面，这有利于产品，时间宝贵。从工程和个人成长方面，弊端显然会多一些。工程师的存在，就是为了解决问题而来，那么，很多时候，我能发现，解决问题的途径，总是不止一个，在这多个途径中选择最优的，在很多时候，成为了问题的问题。当然，有时会遇到解决不了的问题，幸运的是，我的身边，总有比自己强大，有经验的同事，他们也都乐于伸出援手。代码量积累到一定程度的时候（包括自己写的和阅读别人的），我开始明白，在很多时候，逻辑能力与设计能力在开发过程中的重要性，显然超过了其他很多其他因素的重要性，甚至超过了你对某个语法，或者 API 的熟悉程度的重要性。很多时候，拿到一个需求，是需要先进行深入的思考和设计的，是的，代码也是需要设计的。这一点的重要性，在一些因为赶工而堆砌出来的代码积攒到一定数量的时候，会慢慢凸显出来。</p>
<p>这一年拍了很多照片。在加班最厉害的那段时间里，我有那么一瞬，意识到，要是哪天过劳猝死了，我生前见过的种种美好岂不是也会随着一起，没了温度，没了气息，进而消失？于是，我开始记录，拍下一些我生活的轨迹，轨迹里的人和物。在闲暇的日子里，我会带着相机出去「扫街」。35mm，经典人文焦段，虽然拍不出宏大的场面，但用来拍摄街景，街上的人和物，恰到好处。而为了拍出想要的画面，我有时需要挪动脚步，去靠近我的目标，这确实需要一些胆量和技巧。这方面，我虽说不上是高手，不过还是略有小成，手疾眼快，来去自如。「扫街」对于我，确实是一件很自在的事。</p>
<p>11 月份的时候，和公司几个同事去了沙巴旅游。海岛很漂亮，海水很干净，沙子很干净，天很蓝，街道还算干净，交通不堵，开车的都很有礼貌，天气很热，辣椒很辣。载着我们的快艇就快到美人鱼岛的时候，我被浅海几乎透明的海水给震撼到了。按说我也算是海边长大的小孩，可这样干净的海水确实没见过。船还没靠岸，我就按了好几下快门，尽显观光客本色。英语口语得到了不少锻炼，酒店 Check in 的时候，买当地 SIM 卡的时候，午饭时和旁边泰国来的潜水教练搭讪的时候，7-11 买东西的时候，喝咖啡的时候，在海边露天 KTV 要免费啤酒喝的时候，在 hotel bar 点啤酒的时候…其中较为不顺利的，是在买 SIM 卡的时候。那是个街角的小店，看店妹纸几乎不会英语（挺漂亮的），而且，会说的那部分，带着浓重的口音，还好，最后顺利买到。我带的依旧是那部 35mm 的便携相机，没带单反，我知道背个包，即使里面只有一机两镜，它的重量还是会随着你行走距离的增长而增大。另外，还有，就是同行的小伙伴中，带有两部索尼微单（嘻嘻，都是我推荐他们剁手的），16-50mm 的套头，基本可以适应各种旅行中的需求了。嗯，我倡导轻装上阵。</p>
<p>经历种种工作忙碌和生活琐碎，越来越明白一些道理。有句电影的 slogan 这样说，「听过很多道理，依然过不好这一生」。个人拙见，「听过」，就是过不好的原因，「依然」应该是「必然」。在经历过现实生活的前提下，靠自己悟出，体会出，想通的道理，也许同样不能让你过好这一生，但这是在良性地成长，往阳光雨露更充足的地方生长，同时，能在为下一次的突破积累养分。所以这里，我还想劝劝那些看了几篇鸡汤文就跟打了鸡血一样，不下几天就蔫了软了的，而后继续不断花大量时间刷微博朋友圈的朋友们，是经历让我们成长，不是鸡汤。</p>
<p>2015 年，就目前来看，已经能够预见，会是更忙碌的一年。集团准备成立子公司进行创业，专门针对移动应用以及游戏，我是成员之一。创业，从零做起的过程，必定是忙碌的，必定是需要付出很多的，也必定是会收获很多的。我对自己的要求不多：不管步伐或大或小，步速或快或慢，保持住前进的姿态。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一年，如果要用什么词汇来概括一下的话，恐怕只有忙碌二字最为恰当了吧。忙毕业，忙工作。这一年到目前这一刻为止，接触的项目有 4 个，其中有 3 个是从零开始的做起的。工作量很大，时间都很赶，因为公司有所谓战略，要抢一个时间点。这能理解，但就目前的收效来看，都并不是非常理想。]]>
    </summary>
    
      <category term="Review" scheme="https://treylin.me/categories/Review/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近]]></title>
    <link href="https://treylin.me/2014/10/13/ge-chi/"/>
    <id>https://treylin.me/2014/10/13/ge-chi/</id>
    <published>2014-10-13T13:12:31.000Z</published>
    <updated>2014-10-15T13:33:17.000Z</updated>
    <content type="html"><![CDATA[<p>最近的一段时间（一两个月），大幅度减少了耗费在各类社交网络、社区、论坛上的时间（Twitter 和 Instagram 除外），微信也一度处于登出状态，感觉良好，并没有真正损失什么，相反，最近的收获挺多。  </p>
<p>第三季度前半段因为工作的忙碌，以及自己的懒惰，阅读计划丢下不少。最近这段，在看 <a href="http://book.douban.com/subject/24851615/" target="_blank" rel="external">《瓦尔登湖》</a>，我有意锻炼自己的英文阅读能力，所以中文译本和英文原文都看。中文是看的纸书，英文是端着 iPad 看的，进度慢一些。这里要谢谢苹果家的 iBook Store，上面有不少经典名著，大部分还是免费的。对梭罗当时激进的思想，印象深刻。即使放到今天来看，也似乎是一记记有力的耳光。“我相信在今天的中国，需要梭罗来唤醒的梦游者有很多。” 中文译本的翻译者李继宏在导读中写道。我对第一章节中的一句话印象深刻：  </p>
<blockquote>
<p>人们交口称赞和认为成功的生活，无非是生活的一种而已。我们为什么要夸耀一种，而牺牲其他各种呢？<br>The life which men praise and regard as successful is but one kind. Why should we exaggerate any one kind at the expense of the others?  </p>
</blockquote>
<p><a href="http://book.douban.com/subject/11622273/" target="_blank" rel="external">《二十位人性见证者:当代摄影大师》</a>，摄影相关书籍，文字虽然很好，但我有点辜负了作者。文字没有认真看，主要看照片。  </p>
<p>还有<a href="http://book.douban.com/subject/7060185/" target="_blank" rel="external">《江城》</a>，作者是 96 年来到中国涪陵的「美中友好志愿者」，此书记录的是他在涪陵两年间的支教生活。从他踏上中国大地后就开始的，没有停止过的各种疑惑和好奇中，能反观出中国的很多很多问题。我惊讶于这本书居然能在大陆出版，而且还经过了多次再版。值得推荐的一本书，我看的是 Kindle 版的，中国亚马逊商店有售。  </p>
<p>技术方面，研究了关于 Objective-C runtime 的知识，主要是跟 <code>Method Swizzling</code> 相关的方面。国内讲述 <code>Method Swizzling</code> 原理的中文文章几乎没有，英文看到比较好的是 Mattt Thompson 在 NSHipster 上写的这篇 <a href="http://nshipster.com/method-swizzling/" target="_blank" rel="external">Method Swizzling </a>，以及这篇 <a href="http://blog.newrelic.com/2014/04/16/right-way-to-swizzle/" target="_blank" rel="external">The Right Way to Swizzle in Objective-C</a>。我把后面这篇翻译了一下，暂存在了 Evernote 里，后面有时间就放上来吧。为了研究透彻，我还找了开源操作系统 GNUstep<a href="http://wwwmain.gnustep.org/resources/downloads.php?site=ftp%3A%2F%2Fftp.gnustep.org%2Fpub%2Fgnustep%2F" target="_blank" rel="external">（官网）</a> 里 <code>method_exchangeImplementations</code> 相关的源码来阅读。就以上的一些研究成果，在组内做了一次技术分享。国庆前做了另一次分享，是关于 git 的一些高级用法。  </p>
<p>闲暇时基本就是拿着相机到处按快门，好记性不如烂照片。大概如此，细节不表，都在照片里。后面大概还是维持这种状态，只是新项目在上周已经启动，接下来的一段时间应该会很忙。:-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近的一段时间（一两个月），大幅度减少了耗费在各类社交网络、社区、论坛上的时间（Twitter 和 Instagram 除外），微信也一度处于登出状态，感觉良好，并没有真正损失什么，相反，最近的收获挺多。  </p>
<p>第三季度前半段因为工作的忙碌，以及自己的懒惰，阅读]]>
    </summary>
    
      <category term="Life" scheme="https://treylin.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[就这样，毕业了。]]></title>
    <link href="https://treylin.me/2014/06/19/i-have-graduated/"/>
    <id>https://treylin.me/2014/06/19/i-have-graduated/</id>
    <published>2014-06-19T14:23:14.000Z</published>
    <updated>2015-10-19T13:51:35.000Z</updated>
    <content type="html"><![CDATA[<p>领取毕业证书、学位证书的时间，是父亲节后的那天，2014 年 6 月 16 日，当天办了退宿离校各种手续，时间推着人走，就这样，离校了，就这样，毕业了。   </p>
<h3 id="感谢">感谢</h3><p>要先感谢几个人：伟东，超伦，广明。他们一个给我的毕业论文提供了“原材料”，使我在公司项目进行到了水深火热无法自拔的时候，可以比较轻松地，不需太多思考地进行论文的写作和修改；一个在学校帮我打印了论文初稿，拿去给老师查阅评定；一个在论文通过之后，在学校帮我进行装订的各种善后事宜，免去了我要向公司请假，再坐一个多钟的班车回学校的麻烦事。感谢！没有这几个人，我想我论文的整个流程会进行得困难一些。如果以上三位看到这里，在你们有空闲的时候，可以拿起你们的手机，短信，电话，微信我，咱约饭，必然我请。  </p>
<a id="more"></a>  
<img src="http://7xng37.com1.z0.glb.clouddn.com/roommates.JPG" class="roommates">
<center>舍友和我</center> 

<h3 id="回顾">回顾</h3><p>老实说，这次回学校，整个毕业流程走下来，没有太多的离愁别绪。可能是我先于大家出来打拼折腾的缘故吧。大二下学期就出来了，所以准确地说，我的大学时光，呆在学校的时间，大概是两年多一点的时间。我不知道自己在别人眼中算不算不合群的那一类人，但有个事实是，大学里我参加的集体活动，极少。一个方面，大多数时间，我不在学校，当时的我也无心玩耍，总觉得手头的事情更重要一些，现在看来，错了一部分；另一方面，好吧，我确实不太喜欢和太多人凑在一起。大学我经常出去骑车，有过刮台风的那几天，骑车从番禺大学城广外生活区回到从化太平镇的事迹（还好，不是事故）。虽然经常出去，但我不喜欢带其他人一起，我不喜欢被安排，不喜欢自己的计划被他人打乱，而其实我也不喜欢给自己制定计划，经常说走就走，这其实风险很大。本人应该算是学校里比较早开始玩山地车的那一拨吧，车是高考后买的，上大学前就快递到学校。当年是和徐鹏一起买的，高考成绩出来的前一天，我们从汕头潮阳骑去了南澳岛，还提着个 DV，记录下了这逗B的一刻，记得也是在一个骤变的天气里。第二天我们回来，雨下得很大，雨点打在手臂上会疼。回家查了成绩，不理想，那几天，老爸脸上没有一点表情。关于读大学，中间还有一段插曲，这是另外一个故事了，后面再细讲吧。回到喜欢一个人出动的话题。慢慢的，校园里骑车的人越来越多，周围的人中有不少。于是，就有了“泽涛！今天出去骑车么？一起啊！”，“泽涛，周末学生会活动骑车去大夫山，一起啊！”类似这样的议题。谢谢你们的热情，当时的我没有参加对现在的我来说，是个小遗憾。我知道团结力量大，知道要有团队精神，知道要积累广泛的人脉，可是，就是受不了扎堆干一件事。在技术的学习过程中，我发现自己也有这样的倾向。专业是 Java 方向，可我从大一下学期就开始折腾 Python，大二又开始学习 iOS 开发，而后就彻底抛弃了 Java。我选择的这俩，在当时，周围基本没有人了解。我并不是想让自己在人群中显得很不一样，尽管外界确实有这样的看法。我的选择没有明确的目的性，按当时的情况，把 Java 学好，SSH 三大框架，毕业出去找工作应该还要保险一些，可我没有考虑那么多。后来的后来，Python 和 iOS 程序员变得更加吃香一些。行将毕业之际，软件系开始开设这样的课程。  </p>
<h3 id="意外的开端">意外的开端</h3><p>回头说说上大学这件事。我觉得有必要记录下我大学时光的这个逗B、惊险、意外、美丽的开端，也是我人生的最大转折。  </p>
<p>前面提到过，高考成绩不佳。老爸原来的计划，是大概有个一本二本之间的成绩，然后志愿填报某军校，读四年，出来，走上仕途。那时候，我没有考虑那么多，没有远大志向，顺着老爸的意，觉得这选择至少靠谱。成绩出来后，目标军校是上不了了，可选择余地极少极少，愁云惨雾。后来经过老爸和他某个在从事教育工作的朋友的了解，浙江有一个，我满足它的要求，它也满足我们的需求。就这样，我填报了它，暂舒一口气，我们吃起了夏天的西瓜，透心清凉。变故渐渐靠近，我们还一无所知。非洲草原上的瞪羚，埋头吃草，不知母狮已然靠近。在我那一届之前，军校录取通知和相关事宜，是由学生所在的地方的武装部通知到个人，而到了我这一届，信息是在网上发布的。我们知道这个消息有点迟，是在距离截至时间还有两个多小时的一个下午，三点左右，老爸的一个战友的提醒，我们如梦初醒。两个小时，要赶到省城广州去参加体检。没有多想，我和老爸以有生以来最快的出发速度，叫他那个从事教育工作的朋友订了机票，塞了几件衣服，打的，奔赴汕头机场。下面是当时的机票，我保留了下来，在钱包里随身携带。  </p>
<img src="http://7xng37.com1.z0.glb.clouddn.com/ticket.JPG" class="ticket">  
<p>飞机平稳地降落在白云国际机场。我们出了机场，立即打的，赶往省公安厅，没记错的话，是 3 号大院。紧赶慢赶，终于来到了大院门口，已经没看到什么学生模样的人了，我心里顿时一紧。（其实一路上都很紧了，突然一阵，后背发凉）工作人员还在。我小跑着进去，老爸和他朋友在身后被拦住，“家长请留步！”。我循着牌子，找到了我填报的那所学校的报到处，有个穿着制服的大叔，印象中略胖，眉目清晰，眼神锐利。“我是林泽涛，我是来报到的！”，我喘着粗气。“对不起！已经截至十五分钟了！” “不好意思，刚才路上堵车了。” “你是要准备当军人的，这么没有时间观念！”......这样，我求了好几次情，无果。老爸在大厅外面的室外，六月天，汗如雨下。就这样，父子在大厅外又徘徊了一阵。老爸想了很多办法，打了很多电话，得到的大都是比较含糊的说辞......当晚，我们一行三人，在公安厅附近的酒店住下，继续想对策，找出路。有一个我记得很清楚的场景：老爸倚着浴室门口的那个台阶，坐在地板上，抽着烟。现在，人们管这样造型的人，叫 loser。没错，你也应该会和当时的我一样这么认为，我特么才是 loser。事情的转机，是我的一次内心想法的表达。在家，其实基本听老爸的指挥，指哪打哪，久而久之，自己就没啥想法，即使有，也很快就会被噎回去，然后熄灭。那晚，我表达了我要读计算机相关专业的愿望，让他知道了我浓厚的兴趣，一些小成就，老爸的朋友先开声，说了计算机也是热门专业，很有前途，既然我有兴趣，那不如去读这个吧类似的话，记不得了。（这也是我记录下这件事的原因，忘掉的细节越来越多）拨开云雾见月明，老爸表情轻松了好多，但理智地他迅速就开始考虑读哪个学校的问题。   </p>
<p>第二天，我们去了省站搭车，离开了广州，启程回家。  </p>
<h3 id="填报志愿">填报志愿</h3><p>我在高中读的是文科，文科有文科对应的大学专业，理科有理科的，有差别。查看那本填报志愿指南，发现基本没有我可以报的和计算机/软件直接相关的课程，这是障碍之一。还有一个障碍，是二本的录取时间已经过了。这时候，摆在眼前的，就是两条路：一条，填报三本学院；另一条，等二本的院校补录。我选择了后者。之后，就是去了解二本的几个跟计算机/软件开发相关的大学。老爸的朋友，推荐了华软。再然后，我了解到了转专业的事情，知道了被学校录取之后，也能去学校转专业，不过不一定能转成功。也联系到了华软招生办的人，确认了会进行补录的消息。于是，我以文科生的身份，填报了数字媒体艺术（多媒体设计与制作）专业（刚去翻出来看了），心想，万一转不了专业，这个应该还是比较和口味的。接下来的事，就比较顺利了。补录，被录取，收到录取通知书，报到，成功转到软件工程系软件开发专业。  </p>
<p>那年夏天，大概就是在这些情况下度过的。而后，军训，上课，跟一帮师兄出来折腾创业，辗转，毕业。细节不表，全都在我的照片里。  </p>
<p>生活的细节有太多太多，我总想把每一件有意义的事情都记录下来，可是对我来说，执笔太难。相机这个伟大的发明，特别是之后衍生出的带相机的手机，基本实现了我的愿望。我把相机里的照片，手机里的照片，定时备份到电脑的 iPhoto 里，形成一个个 Event，按时间命名。回去翻看，有时会笑cry；有时会拿手机把某张囧照拍下来，发给当事人，或当事人所在的群组；有时会联想到其它很多东西。  </p>
<p>碎碎念了这么多，差不多了。</p>
<h3 id="结语">结语</h3><p>路还长，愿自己能走好每一步，万一入坑，希望能具备出坑的能力，要是能练就填坑的神力，就更好了。  </p>
<p>还有，刚刚梅西绝杀了，阿根廷出线！🍺 :-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>领取毕业证书、学位证书的时间，是父亲节后的那天，2014 年 6 月 16 日，当天办了退宿离校各种手续，时间推着人走，就这样，离校了，就这样，毕业了。   </p>
<h3 id="感谢">感谢</h3><p>要先感谢几个人：伟东，超伦，广明。他们一个给我的毕业论文提供了“原材料”，使我在公司项目进行到了水深火热无法自拔的时候，可以比较轻松地，不需太多思考地进行论文的写作和修改；一个在学校帮我打印了论文初稿，拿去给老师查阅评定；一个在论文通过之后，在学校帮我进行装订的各种善后事宜，免去了我要向公司请假，再坐一个多钟的班车回学校的麻烦事。感谢！没有这几个人，我想我论文的整个流程会进行得困难一些。如果以上三位看到这里，在你们有空闲的时候，可以拿起你们的手机，短信，电话，微信我，咱约饭，必然我请。  </p>]]>
    
    </summary>
    
      <category term="Life" scheme="https://treylin.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[An old tweet]]></title>
    <link href="https://treylin.me/2014/03/31/an-old-tweet/"/>
    <id>https://treylin.me/2014/03/31/an-old-tweet/</id>
    <published>2014-03-31T14:08:00.000Z</published>
    <updated>2015-10-16T16:31:04.000Z</updated>
    <content type="html"><![CDATA[<p>看图说话：<br><img src="http://7xng37.com1.z0.glb.clouddn.com/anoldtweet.png" class="oldtweet">  </p>
<p><del>说点啥呢？以前我遇到支持盗版，以用盗版为荣，并且觉得用正版的都是傻屄的傻屄时，都会上去就是一顿理论...在我大天朝，这样的来来回回，总让我觉得很无力，受伤，于是，只能拖着疲惫的身躯，逃到 Twitter 上发出这样无奈的宣言，暗自咬牙。大概也是从那阵子起，我不再在像微博，Q群这样的场合去跟人理论这件事，不再像之前那样浪费口舌。转而，是在平时朋友找我有手机电脑问题的时候，捎带的提醒几句。我觉得用处没有很大，真的，我知道的，但我不会停下来。这中间要是有一个人被我影响到，开始支持使用正版，那我觉得已经功德无量。值得欣慰的是，我家里的人，都是正版使用者。老爸，老妹，老弟的 iPhone 里，付费的应用都是充值买的，女朋友的 iPad 里也有好几个付费应用。她也已经养成购买应用的习惯。每次我推荐应用给她，她都会问到多少钱。</del></p>
<p><del>从发出这条推到现在，两年的时间吧，我买了不少软件，应用。其中有开发工具，有手游，有照相机应用等等。在我看来，这样是行为和上优衣库买一件衣服一样，一种购物行为，天经地义。而与它们带给我的快捷，便利，丰富的功能相比，它们的价格我觉得实在便宜。</del></p>
<p>不多解释了，我会这样一直支持正版，并尽可能让更多的人去了解，支持这样一件事。:-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看图说话：<br><img src="http://7xng37.com1.z0.glb.clouddn.com/anoldtweet.png" class="oldtweet">  </p>
<p><del>说点啥呢？以前我遇到支持盗版，以用盗版为荣，并且觉得用正版的都是]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[入手 treylin.me 域名]]></title>
    <link href="https://treylin.me/2014/03/29/a-new-domain/"/>
    <id>https://treylin.me/2014/03/29/a-new-domain/</id>
    <published>2014-03-29T03:25:00.000Z</published>
    <updated>2015-10-16T16:32:38.000Z</updated>
    <content type="html"><![CDATA[<p>看图说话：</p>
<img src="http://7xng37.com1.z0.glb.clouddn.com/new_domain.png" class="domain">  
<p>嗯，这一天，我在 Namecheap 上购入了 treylin.me 这个域名，并在博客里加了 CNAME 文件，做了域名指向。不再使用原来那个带 github.io 的域名，逼格指数上升一个台阶，也更感觉到这是属于我个人的一件东西，我应该好好对它。 :-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看图说话：</p>
<img src="http://7xng37.com1.z0.glb.clouddn.com/new_domain.png" class="domain">  
<p>嗯，这一天，我在 Namecheap 上购入了 treylin.me 这个域名，并在]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[几件事 几点感悟 (一篇12年的旧文)]]></title>
    <link href="https://treylin.me/2014/03/29/ji-jian-shi-ji-dian-gan-wu/"/>
    <id>https://treylin.me/2014/03/29/ji-jian-shi-ji-dian-gan-wu/</id>
    <published>2014-03-29T03:08:00.000Z</published>
    <updated>2015-10-16T16:30:45.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇 2012-02-25 在新浪博客上写了旧文，不知道为啥之后就再也没在那个平台上面写过东西，估计是太容易让人分心了吧。我是在看别人文章的时候点到自己的博客的，这才记起来我还有一个新浪博客这件事了。  </p>
<img src="http://7xng37.com1.z0.glb.clouddn.com/huoguo.jpg" class="family">  
<p>一家五口，牛肉火锅，2012年1月25日。<br>（PS：iPhone 自带的图片浏览是没有查看 exif 信息的功能的，没找到合适的 app 之前，只好绕个圈，把图片导入电脑，再查看照片信息，实属鸡肋一处啊）</p>
<p>那时候老弟老妹还都在放假中的，如今，该上学的上学，该上班的上班，家里比往日，也安静了许多。安静也好，可以静下心来，做些研究学习。年前几天和年后几天，实在是荒废了很多时间。  </p>
<a id="more"></a>
<p>买了相关的苹果设备，当真地走上 iOS 开发之路，在我看来，路还是相当的漫长的，至少那些几星期几个月破多少下载量，进而暴富的传奇，我还看不到边，当然，这也不是我走此路的初衷。这干的是自己的兴趣所在，会花力气与时间在这上面的，其他的没有，坚持这两个字，还是做得到的。谢谢家里人的支持，谢谢老爸的肯定和投资。回想，您儿子在过去的二十几年光阴里，确实做过让您不愉快的，达不到期望的事，自己也吃了不少自找的苦。好在，现在的您的儿子已经会思考，我们的话叫“会想了”，现在做的每件事都经过大脑，都有分析了，不在是那时候的莽撞少年了。</p>
<p>今年已经拿了驾照，这段时间在家里也当了司机。可能因为从幼儿园读书起就有老爸的车接送，耳濡目染，以至于学车的时候上手特别快，教练也惊讶，你以前没开过车？没有啊，游乐园碰碰车就有啊！还有，老爸以前开过一段时间的大巴，需要A证的那种，难道遗传？老爸很欣慰：载了你们那么多年，也该你来载我了吧！我也很欣慰，但也感觉到了责任，渐渐的，担子会被加到我们这一代的肩上，应该说是，我们这一代，要开始帮他们分担了。</p>
<p>老弟高中后读的是警校，是自己的意愿，去年争取到了白云机场实习的机会，这段时间，他是不需要家里给生活费的了（他大哥居然还需要），过年时，还给老人发了红包，钱不多，在他的能力范围之内，老人们很高兴，幸福溢于言表。一家人坐下来谈话间，他无奈感慨道，中专学历，让他感觉低人一等，他跟老爸商量想继续读书，参加高考。老爸为他的“会想”感到高兴，但重新“插队”，这个就有难度了，也有一定的风险，万一考不上，原来的岗位又不被保留，或是考上了，不理想，没有好的学校读......老弟表了态，会就此一搏。这件事还是准备中，望一切顺利。</p>
<p>老妹在一中，今年是高二了，眼看高考也不远了，我时不时就来几句激励的话，或是小施加点压力，目的也是想让她读好书，考个合她心意的大学。他的大哥我在高考上，算是栽了跟头，任何对应试教育的吐槽其实都是无力的，高考的存在，有其合理性，高考考好一点，选择自己心仪的专业，做自己想做的事，才是正道啊！你就努力吧！</p>
<p>鼓励老妈多出去走走。她任家庭主妇一职已多年，现在子女们工作的工作，读书的也都在外面，妹是寄宿的，一周回一次，家里平时会很安静。我希望她能参加一些运动，或是旅游，去看看世界，健康身心。他的儿子现在还拿不出旅游经费，不过，有收入后，会的。</p>
<p>文虽短，写写断断也两个星期了吧，一直没有专心下来。现在人们都很浮躁，我也不例外，没有一段比较长的时间去放在某一件事情上，以至于总感觉不到收获的喜悦。其实仔细想来，原因之一，是我们关心的事情太多了。例子是，像我之前用 Google Reader 订阅了一大堆源，到后来，unread 一直是 1000+，要是 Google 显示的是确切数字，估计 5000+ 都有了，文章都是一扫而过，没有精读，这里面，不知道浪费了多少人生启迪，多少合适有用的技术指导，又或是多少新鲜出炉的技术，研究成果......所以，我抽了时间，把 Google Reader 整理了一遍，留下了一些实用的，适用的，质量高的源，一下子就如释重负。现在每天都会浏览，电脑端，或是手机端，每天的 unread 都会被稳定的“消灭”，原来的被动阅读已经变为主动去获取知识。衍生到其他事情，其实是一个道理的。自己没有必要关心的人或事，有何必浪费时间在上面呢？方韩之争，那些成天在互联网上骂来骂去的“挺韩派”，“挺方派”们，你们用在这上面的时间，给你们带来了多少收益没有？你们学到韩的文采，或是方的渊博没有？这样口水战，意义何在？还不如多看看书，多运动运动，至少对自己身心健康还有点益处。其实，这世界，或说就在身边不远，已经有太多正经事需要你的投入，家人，好友，待读的好书，未完成的 project，还没有学习的技术......这些你完成了就会有所获得，甚至是在你操作的过程中就可以有所收获的事情，才是你真正需要关心的。其实这些就已经够多了，认真的实行，你已经会觉得时间不够用，或是无奈分身乏术了，哪还有精力时间花在无关痛痒的其他上。其实人活着，要活得有意义，有价值，是简单的，有着一些有意义的事情你在忙活着，这就够了。</p>
<p>也是很久没有写博文了，其实写博文是一个很好的总结与静心的途径，至于有没有访客，不应该成为写博的初衷。<br>（给自己可怜的访问量一个台阶下？呵呵，whatever） :-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一篇 2012-02-25 在新浪博客上写了旧文，不知道为啥之后就再也没在那个平台上面写过东西，估计是太容易让人分心了吧。我是在看别人文章的时候点到自己的博客的，这才记起来我还有一个新浪博客这件事了。  </p>
<img src="http://7xng37.com1.z0.glb.clouddn.com/huoguo.jpg" class="family">  
<p>一家五口，牛肉火锅，2012年1月25日。<br>（PS：iPhone 自带的图片浏览是没有查看 exif 信息的功能的，没找到合适的 app 之前，只好绕个圈，把图片导入电脑，再查看照片信息，实属鸡肋一处啊）</p>
<p>那时候老弟老妹还都在放假中的，如今，该上学的上学，该上班的上班，家里比往日，也安静了许多。安静也好，可以静下心来，做些研究学习。年前几天和年后几天，实在是荒废了很多时间。  </p>]]>
    
    </summary>
    
      <category term="Life" scheme="https://treylin.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《现代操作系统》书摘]]></title>
    <link href="https://treylin.me/2013/06/05/xian-dai-cao-zuo-xi-tong-shu-zhai/"/>
    <id>https://treylin.me/2013/06/05/xian-dai-cao-zuo-xi-tong-shu-zhai/</id>
    <published>2013-06-05T06:55:00.000Z</published>
    <updated>2013-10-23T10:39:21.000Z</updated>
    <content type="html"><![CDATA[<p>前阵子开始看<a href="http://book.douban.com/subject/3852290/" target="_blank" rel="external">《现代操作系统》</a>，经典之作不用多说，计算机专业的同学们可以看看。很多地方写得都很好，引人入胜。决定在这里摘录一些片段。    </p>
<blockquote>
<p>进程和程序间的区别是很微妙的，但非常重要。用一个比喻可以使我们更容易理解这一点。想象一位有一手好厨艺的计算机科学家正在为他的女儿烘制生日蛋糕。他有做生日蛋糕的食谱，厨房里有所需的原料：面粉、鸡蛋、糖、香草汁等。在这个比喻中，做蛋糕的食谱就是程序（即用适当形式描述的算法），计算机科学家就是处理机（CPU），而做蛋糕的各种原料就是输入数据。进程就是厨师阅读食谱、取来各种原料以及烘制蛋糕等一系列动作的总和。  </p>
</blockquote>
<p>这段比喻很生动啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前阵子开始看<a href="http://book.douban.com/subject/3852290/" target="_blank" rel="external">《现代操作系统》</a>，经典之作不用多说，计算机专业的同学们可以看看。很多地方写得都很好，引人入胜]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[水中的精灵]]></title>
    <link href="https://treylin.me/2013/04/09/equals-shui-li-de-jing-ling/"/>
    <id>https://treylin.me/2013/04/09/equals-shui-li-de-jing-ling/</id>
    <published>2013-04-09T14:10:00.000Z</published>
    <updated>2013-04-09T07:11:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>养此物已逾四年 小有规模 不挑食 不择境 甚至是在食物匮乏 水质恶劣的情况下 依然可以活得自在 生性孤僻 好斗 一般只能独处 遇敌 蛰伏 蓄力 择机 再发起致命攻击 直到把对方打退 或自己战死 身怀绝技者 游弋间 尽显王者风范 众同类 无不退而避之 集斗魂 傲骨一身 此鱼名曰:中国斗鱼</p>
</blockquote>
<p>以上是我在 2011-11-28 23:53 发的一条<a href="http://weibo.com/1841711151/xzBrQFrhP" target="_blank" rel="external">微博</a>。忘记当时哪来的兴致了，估计是正在欣赏摆放在宿舍的鱼缸里的它们。  </p>
<p>我爱养鱼。养鱼生涯，从小学到现在，也有十来年了。（我都没意识到自己养了这么久的鱼，当然，中间因为学习工作，养鱼事业搁置过。）可以说阅鱼无数，养过的鱼也不少，还成功繁殖过金鱼，孔雀鱼，斗鱼等，现在回想起来，成就感依然。  </p>
<a id="more"></a>
<p>最近在宿舍里养的有虾虎，白云金丝鱼（是一种中国原产的鱼类，也叫“唐鱼”），红腹鱥（念“gui”四声），鳑鲏，两条普叉，一条新会HK，还有蛙眼守宫一只。其中的虾虎和鳑鲏，都是自己野采回来的。学校离流溪河比较近，有空加上天气好的话，就会骑车去那转悠。有人是不是疑问，你在宿舍养这么多鱼，有时间照顾吗？其实鱼并不多，大部分养在同一个鱼缸里，好照顾，斗鱼是必须分开饲养的，否则后果会比较惨烈；现在养的这些品种都比较皮实，好养活，对食物，水质不是很挑剔；我给小鱼缸上了一个小型的瀑布式过滤器，过滤造水流用。要知道，这鱼在野外，都是在流水中过活的。所以，其实这些小生命并没有给我的生活带来多少麻烦。起床时给他们喂点饲料，隔一两个星期清洗过滤器中的滤材。一般也不需要换水，现在鱼缸里有底沙做硝化细菌的温床，有螺和虾做清洁工，有过滤器，加上都是些小型鱼，不会产生大量“生活垃圾”，现在基本达到一个平衡的水底生态，水质稳定。  </p>
<p>初中高中在家的时候，也养鱼。那时家里有地方和器材，鱼缸比较大，所以大型鱼比较多。皮实的地图，鹦鹉，招财，七星刀，九角龙，银龙等等。这些都是纯粹的吃货，吃得多，拉的也多。所以尽管有比较完备的过滤设备，还是免不了需要一星期左右换掉一部分水。起初我用的常规的上部过滤器，加了很多滤材，后来觉得不够用，换了外置过滤桶，省心不少。给大鱼喂食是很过瘾的事。用小鱼，面包虫，甚至蟑螂当饲料，也喂商品颗粒饲料。食物一投进缸里，尤其是投小鱼的时候，鱼缸里就一阵翻腾。大鱼吃小鱼，看着过瘾。  </p>
<p>记得有一次比较惨痛的记忆是一条罗汉鱼和一条星点龙之间的故事。高中时的事。我有一天晚上去逛了水族馆，看中了一条澳洲星点龙，它的须，鳞片，光泽，尾鳍，几乎就是我见过最完美的一条了。当时心里琢磨着，请回家吧。可是，当时家里养着一条罗汉鱼。罗汉是一种脾气极其暴躁的鱼，它会主动攻击鱼缸里所有会动的东西，以及试图攻击鱼缸外一切移动的东西。但是又不忍心这么完美的一条星点龙落入他人之手，于是，没有再多挣扎，就给请回家了。回家先把鱼缸用玻璃加专用的吸盘隔开成两个水域，分开养上了。罗汉对这心来的表现出强烈的攻击性，冲撞着隔挡玻璃。星点龙倒还有好，闲庭信步。一两天，相安无事。我返校，当时上的寄宿学校，一星期回一次家。在学校的第二天，便传来噩耗。老妈电话告诉我，龙鱼跳缸了，跳到隔壁罗汉的地方，被罗汉咬死。当时把我给伤心的。后来买鱼，总会仔细考量，不在冲动性购鱼。</p>
<p>养了这么多鱼，最爱的，是银龙。一个龙鱼里最廉价，却是最飘逸最迅猛的品种。几乎所有的常规的龙鱼品种我都养过，金龙，红龙，星点龙，青龙等。金龙红龙现在被市场炒得红火，价格不菲。可我觉得养金龙红龙的没几个是真正爱好养鱼的，而是跟了潮流，用昂贵的观赏鱼来显示身份，基本跟奢侈品一个路数。星点龙小时候还比较好看，大了身体会轻微发黑，并且性格比较具有攻击性，会欺负其他鱼类。只有银龙，最对我的胃口。银白色身躯，清素淡雅，身上没有杂色，也没有金龙红龙那种庸俗的金钱颜色。游姿非常飘逸，一副与世无争的姿态，在水里像身着白色薄纱的武士，在竹林里神出鬼没。吃东西的时候，它会慢慢地在远远就瞄准猎物，在靠近到攻击范围的时候，张嘴，迅猛游去。一般它抓小鱼很少失手，都是一招毙命。以后自己家有条件的话，应该会置办一个鱼缸，养大型鱼的话，就一定是银龙了。  </p>
<p>斗鱼是比较奇葩的品种。很好养活，主要靠腮呼吸，还有一个辅助呼吸的迷腮，呼吸原理类似哺乳动物的肺，因此斗鱼在含氧量极低的水里照样可以生存，因为它能呼吸空气中的氧气。斗鱼是一种有节气的鱼，两条雄鱼相遇，必须先干一架，打个你死我活的才善罢甘休。前阵子，把休战了一个冬天的两条斗鱼，一条普叉，一条新会HK，放一起打了一架。估计是整个冬天给憋的，这一战足足打了半个多钟，最后，体型较小的新会HK胜，而普叉的嘴唇已经被咬得受了伤。我就蹲在旁边观战，发现两个品种的斗鱼使用的战术<br>略有不同。普叉的攻击手段比较单一，就是对嘴，而新会HK，除了对嘴，它还抓住一切机会，去攻击对手头部的其他位置，手段比较多，动作也比较灵活。估计是因此得胜。  </p>
<p>想想算了，以后技术的路子混不下去，咱就开个水族馆得了。都是爱好，干着也快乐，还不用给别人打工。有认识几个开水族馆的，混得不错，小轿车都开上了。其实让我做自己想做的，感兴趣的，骑个破单车又有什么所谓呢，人要知足。看到那些刚出校门的，嫌这待遇不好，嫌那要经常加班的，其实你错过了多少可以学习长进的机会。工作，不能单看待遇做选择。真开店了，估计我也会在闲暇时折腾折腾技术的，不折腾皮痒痒。</p>
<p>还是要谢谢这些年来，我不在家的时候，帮我照顾鱼的家人们，尤其是老妈。:-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>养此物已逾四年 小有规模 不挑食 不择境 甚至是在食物匮乏 水质恶劣的情况下 依然可以活得自在 生性孤僻 好斗 一般只能独处 遇敌 蛰伏 蓄力 择机 再发起致命攻击 直到把对方打退 或自己战死 身怀绝技者 游弋间 尽显王者风范 众同类 无不退而避之 集斗魂 傲骨一身 此鱼名曰:中国斗鱼</p>
</blockquote>
<p>以上是我在 2011-11-28 23:53 发的一条<a href="http://weibo.com/1841711151/xzBrQFrhP">微博</a>。忘记当时哪来的兴致了，估计是正在欣赏摆放在宿舍的鱼缸里的它们。  </p>
<p>我爱养鱼。养鱼生涯，从小学到现在，也有十来年了。（我都没意识到自己养了这么久的鱼，当然，中间因为学习工作，养鱼事业搁置过。）可以说阅鱼无数，养过的鱼也不少，还成功繁殖过金鱼，孔雀鱼，斗鱼等，现在回想起来，成就感依然。  </p>]]>
    
    </summary>
    
      <category term="Aquarium" scheme="https://treylin.me/categories/Aquarium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView 一点技巧]]></title>
    <link href="https://treylin.me/2013/03/22/about-uitableview/"/>
    <id>https://treylin.me/2013/03/22/about-uitableview/</id>
    <published>2013-03-22T07:28:00.000Z</published>
    <updated>2013-11-11T07:31:46.000Z</updated>
    <content type="html"><![CDATA[<p>这是我在网上摘录的一点关于优化 UITableView 的技巧，在这里分享一下。  </p>
<p>1、每次都看一下有没有能重用的 cell，而不是永远重新新建（这个是 UITableView 的常识）<br>2、Cell 里尽量不要用 UIView 而是全部自己画<br>3、图片载入放到后台进程去进行，滚出可视范围的载入进程要 cancel 掉<br>4、圆角、阴影之类的全部 bitmap 化，或者放到后台 draw 好了再拿来用<br>5、Cell 里要用的数据提前缓存好，不要现用现去读文件<br>6、数据量太大来不及一次读完的做一个 load more cell 出来，尽量避免边滚边读数据，这样就算是双核的 CPU 也难保不会抽。  </p>
<p>做到以上6条的话，应该就能做出很顺畅的滚动了（现在的 Twitter 官方客户端的原作者写过一篇文章，总结起来也无非就是我说的前3条，可以找来看看）。   </p>
<p>Path 2.5 的那个滚动说实在的不是很顺畅，图片显示出来的时候都会抽一下，他们还有很大的改进余地。  </p>
<p>对于3的补充说明：UIImageView 的载入是惰性的说法，是对的。[UIImage imageWithContentOfFile:] 出来的 UIImage 其实并没有真正把文件读入内存，而是要等到用的时候才会去读。但问题就在于 UIImageView 试图去 draw 图片的时候，它读文件、渲染也是在主线程里做的，所以你要读入的图片如果很大（比如 iPad3 上的 @2x 图），不管 iOS 做了何种优化，这一步是一定要卡的。这也就是为什么我说图片要放到后台进程读出来、scale好再用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是我在网上摘录的一点关于优化 UITableView 的技巧，在这里分享一下。  </p>
<p>1、每次都看一下有没有能重用的 cell，而不是永远重新新建（这个是 UITableView 的常识）<br>2、Cell 里尽量不要用 UIView 而是全部自己画<br>]]>
    </summary>
    
      <category term="iOS" scheme="https://treylin.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C 的一些关键字]]></title>
    <link href="https://treylin.me/2013/02/20/about-property-synthesize-nonatomic/"/>
    <id>https://treylin.me/2013/02/20/about-property-synthesize-nonatomic/</id>
    <published>2013-02-20T07:16:00.000Z</published>
    <updated>2013-11-14T06:27:57.000Z</updated>
    <content type="html"><![CDATA[<p>使用 @property 配合 @synthesize 可以让编译器自动实现 getter/setter 方法，使用的时候也很方便，可以直接使用 “对象.属性” 的方法调用；如果我们想要 “对象.方法” 的方式来调用一个方法并获取到方法的返回值，那就需要使用 @property 配合 @dynamic 了。  </p>
<p>使用 @dynamic 关键字是告诉编译器由我们自己来实现访问方法。如果使用的是 @synthesize，那么这个工作编译器就会帮你实现了。  </p>
<p>readonly 此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在 @implementation 中只需要一个读取器。或者如果你使用 @synthesize 关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。  </p>
<p>readwrite 此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在 @implementation 中实现。如果使用 @synthesize 关键字，读取器和设置器都会被解析。</p>
<p>nonatomic：非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问。  </p>
<p>atomic 和 nonatomic 用来决定编译器生成的 getter 和 setter 是否为原子操作。<br><a id="more"></a><br>atomic :<br>设置成员变量的 @property 属性时，默认为 atomic，提供多线程安全。<br>在多线程环境下，原子操作是必要的，否则有可能引起错误的结果。加了 atomic，setter 函数会变成下面这样：  </p>
<pre><code><span class="comment"><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;lock&#125;</span><br><span class="line">  <span class="keyword">if</span> (property != newValue) &#123; </span><br><span class="line">       [property release]; </span><br><span class="line">       property = [newValue retain]; </span><br><span class="line">   &#125;</span><br><span class="line">&#123;unlock&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>nonatomic :<br>禁止多线程，变量保护，提高性能。</p>
<p>atomic 是 ObjC 使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在 iPhone 这种小型设备上，如果没有使用多线程间的通讯编程，那么 nonatomic 是一个非常好的选择。  </p>
<p>指出访问器不是原子操作，而默认地，访问器是原子操作。这也就是说，在多线程环境下，解析的访问器提供一个对属性的安全访问，从获取器得到的返回值或者通过设置器设置的值可以一次完成，即便是别的线程也正在对其进行访问。如果你不指定  nonatomic ，在自己管理内存的环境中，解析的访问器保留并自动释放返回的值，如果指定了 nonatomic ，那么访问器只是简单地返回这个值。</p>
<p>assign :<br>简单赋值，不更改索引计数。<br>对基础数据类型 （例如 NSInteger，CGFloat）和 C 数据类型（int, float, double, char 等）适用简单数据类型</p>
<p>此标记说明设置器直接进行赋值，这也是默认值。在使用垃圾收集的应用程序中，如果你要一个属性使用assign，且这个类符合NSCopying 协议，你就要明确指出这个标记，而不是简单地使用默认值，否则的话，你将得到一个编译警告。这再次向编译器说明你确实需要赋值，即使它是可拷贝的。</p>
<p>copy :<br>建立一个索引计数为1的对象，然后释放旧对象。<br>对 NSString 它指出，在赋值时使用传入值的一份拷贝。拷贝工作由 copy 方法执行，此属性只对那些实行了 NSCopying 协议的对象类型有效。更深入的讨论，请参<br>考“复制”部分。</p>
<p>retain :<br>释放旧的对象，将旧对象的值赋予输入对象，再提高输入对象的索引计数为 1。<br>对其他 NSObject 和其子类<br>对参数进行 release 旧值，再 retain 新值<br>指定 retain 会在赋值时唤醒传入值的 retain 消息。此属性只能用于 Objective-C 对象类型，而不能用于 Core Foundation 对象。(原因很明显，retain 会增加对象的引用计数，而基本数据类型或者 Core Foundation 对象都没有引用计数)。<br>注意: 把对象添加到数组中时，引用计数将增加对象的引用次数 +1。</p>
<p>retain 的实际语法为 :</p>
<pre><code><span class="comment"><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)newName</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span> (name != newName) &#123; </span><br><span class="line">        [name release]; </span><br><span class="line">        name = [newName retain]; </span><br><span class="line">    <span class="comment">// name’s retain count has been bumped up by 1 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>copy 与 retain :<br>copy 其实是建立了一个相同的对象，而 retain 不是 :<br>比如一个 NSString 对象，地址为 0×1111，内容为 @&quot;STR&quot;<br>copy 到另外一个 NSString 之后，地址为 0×2222，内容相同，新的对象 retain 为 1，旧有对象没有变化；<br>retain 到另外一个 NSString 之后，地址相同（建立一个指针，指针拷贝），内容当然相同，这个对象的 retain 值 +1；<br>也就是说，retain 是指针拷贝，copy 是内容拷贝。</p>
<p>retain 的 set 方法应该是浅复制，copy 的 set 方法应该是深复制了<br>copy 另一个用法：<br>copy 是内容的拷贝，对于像 NSString，的确是这样.<br>但是, 如果是 copy 的是一个 NSArray 呢? 比如,<br>NSArray <em>array = [NSArray arrayWithObjects:@&quot;hello&quot;, @&quot;world&quot;, @&quot;baby&quot;];<br>NSArray </em>array2 = [array copy];<br>这个时候，系统的确是为 array2 开辟了一块内存空间，但是我们要认识到的是，array2 中的每个元素，只是 copy 了指向array中相对应元素的指针。这便是所谓的&quot;浅复制&quot;.</p>
<p>assign 与 retain：  </p>
<ol>
<li>接触过 C，那么假设你用 malloc 分配了一块内存，并且把它的地址赋值给了指针 a，后来你希望指针 b 也共享这块内存，于是你又把 a 赋值给（assign）了 b。此时 a 和 b 指向同一块内存，请问当 a 不再需要这块内存，能否直接释放它？答案是否定的，因为 a 并不知道 b 是否还在使用这块内存，如果 a 释放了，那么 b 在使用这块内存的时候会引起程序 crash 掉。</li>
<li>了解到 1 中 assign 的问题，那么如何解决？最简单的一个方法就是使用引用计数（reference counting），还是上面的那个例子，我们给那块内存设一个引用计数，当内存被分配并且赋值给 a 时，引用计数是 1。当把 a 赋值给 b 时引用计数增加到 2。这时如果 a 不再使用这块内存，它只需要把引用计数减 1，表明自己不再拥有这块内存。b 不再使用这块内存时也把引用计数减 1。当引用计数变为0的时候，代表该内存不再被任何指针所引用，系统可以把它直接释放掉。</li>
</ol>
<p>总结：上面两点其实就是 assign 和 retain 的区别，assign 就是直接赋值，从而可能引起 1 中的问题，当数据为 int, float 等原生类型时，可以使用assign。retain 就如 2 中所述，使用了引用计数，retain 引起引用计数加 1, release 引起引用计数减1，当引用计数为0时，dealloc 函数被调用，内存被回收。</p>
<pre><code><span class="built_in">NSString</span> *pt = [[<span class="built_in">NSString</span> alloc] initWithString:<span class="string">@"abc"</span>];
</code></pre><p>上面一段代码会执行以下两个动作</p>
<ol>
<li>在堆上分配一段内存用来存储 @&quot;abc&quot;  比如：内存地址为：0X1111 内容为 &quot;abc&quot;。</li>
<li>在栈上分配一段内存用来存储 pt 比如：地址为：0Xaaaa 内容自然为 0X1111。  </li>
</ol>
<p>下面分别看下assign retain copy assign 的情况：  </p>
<pre><code>NSString *newPt = <span class="string">[pt assing]</span>;  
</code></pre><p>此时 newPt 和 pt 完全相同 地址都是 0Xaaaa  内容为 0X1111  即 newPt 只是 pt 的别名，对任何一个操作就等于对另一个操作。 因此retainCount 不需要增加。<br>retain 的情况：</p>
<pre><code>NSString *newPt = <span class="string">[pt retain]</span>;  
</code></pre><p>此时 newPt 的地址不再为 0Xaaaa，可能为 0Xaabb 但是内容依然为 0X1111。 因此 newPt 和 pt 都可以管理 &quot;abc&quot; 所在的内存。因此 retainCount 需要增加1。<br>copy 的情况：</p>
<pre><code><span class="built_in">NSString</span> *newPt = [pt <span class="keyword">copy</span>];
</code></pre><p>此时会在堆上重新开辟一段内存存放 @&quot;abc&quot; 比如 0X1122 内容为 @&quot;abc&quot; 同时会在栈上为 newPt 分配空间。比如地址：0Xaacc 内容为0X1122 因此 retainCount 增加 1 供 newPt 来管理 0X1122 这段内存</p>
<hr>
<p>看了这么多也许大家有点晕， 现在进行实际的代码演示：</p>
<pre><code><span class="constant">@property</span> (nonatomic, <span class="built_in">assign</span>) <span class="built_in">int</span> <span class="built_in">number</span><span class="comment">;</span>
</code></pre><p>这里定义了一个 int 类型的属性， 那么这个 int 是简单数据类型，本身可以认为就是原子访问，所以用 nonatomic,  不需要进行引用计数，所以用 assign。 适用于所有简单数据类型。  </p>
<pre><code><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *myString;
</code></pre><p>这里定义了一个 NSString 类型的属性，不需要原子操作，所以用 nonatomic.<br>为什么需要 copy，而不是 retain 呢！ 因为如果对 myString 赋值原字符串是一个可变的字符串(NSMutableString)对象的话，用retain的话，当原字符串改变的时候你的myString属性也会跟着变掉。我想你不希望看到这个现象。 实际上博主测试， 如果原来的字符串是 NSString 的话，也只是retain一下，并不会copy副本。  </p>
<pre><code><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">UIView</span> *myView;
</code></pre><p>这里定义了一个 UIView 类型的属性，不需要原子操作，所以用 nonatomic。<br>当对 myView 赋值的时候原来的 UIView 对象 retainCount 会加 1。  </p>
<pre><code><span class="comment">// 接口文件</span>
<span class="variable">@interface</span> <span class="attribute">MyClass </span>: NSObject
<span class="variable">@property</span> (nonatomic, assign) int number;
<span class="variable">@property</span> (nonatomic, copy) NSString  *myString;
<span class="variable">@property</span> (nonatomic, retain) UIView *myView;
<span class="variable">@end</span>  

<span class="comment">// 实现文件</span>
<span class="variable">@implementation</span> MyClass
<span class="variable">@synthesize</span> number;
<span class="variable">@synthesize</span> myString;
<span class="variable">@synthesize</span> myView;
<span class="comment">// 释放内存</span>
<span class="tag">-</span> (void) <span class="tag">dealloc</span>
{
    <span class="attr_selector">[myString release]</span>;   <span class="comment">// copy 的属性需要 release;</span>
    <span class="attr_selector">[myView release]</span>;     <span class="comment">// retain 的属性需要 release;</span>
    <span class="attr_selector">[super dealloc]</span>;      <span class="comment">// 传回父对象</span>
}
<span class="variable">@end</span>
</code></pre><p>假如你有一段代码创建了一个 MyClass 对象:  </p>
<pre><code>MyClass *instance  = [MyClass alloc] init];

// <span class="keyword">number</span> 赋值，没什么可说的，简单数据类型就这样
instance.<span class="keyword">number</span> = <span class="number">1</span>;
// 创建一个可变字符串
NSMutableString *<span class="built_in">string</span> = [NSMutableString stringWithStrin<span class="variable">g:</span>@<span class="string">"hello"</span>];
instance.myString = <span class="built_in">string</span>;                   // 对 myString 赋值
[<span class="built_in">string</span> appendStrin<span class="variable">g:</span>@<span class="string">" world!"</span>];           // 往 <span class="built_in">string</span> 追加文本 
NSLog(@”%@”, <span class="built_in">string</span>);                           // 此处 <span class="built_in">string</span> 已经改变，输出为<span class="string">"hello world!"</span>
NSLog(@”%@”, instance.myString);         // 输出 myString，你会发现此处输出仍然为 <span class="string">"hello"</span> 因为 myString 在 <span class="built_in">string</span> 改变之前已经 <span class="built_in">copy</span> 了一份副本
UIView *<span class="keyword">view</span> = [[UIView alloc] init];
NSLog(@”retainCount = %<span class="keyword">d</span>”, <span class="keyword">view</span>.retainCount);
// 输出 <span class="keyword">view</span> 的引用计数，此时为 <span class="number">1</span>
instance.myView = <span class="keyword">view</span>;      // 对 myView 属性赋值
NSLog(@”retainCount = %<span class="keyword">d</span>”, <span class="keyword">view</span>.retainCount);
// 再次输出 <span class="keyword">view</span> 的引用计数，此时为 <span class="number">2</span>，因为 myView 对 <span class="keyword">view</span> 进行了一次 retain。 
[<span class="keyword">view</span> release];
// 此处虽然 <span class="keyword">view</span> 被 release 释放掉了，但 myView 对 <span class="keyword">view</span> 进行了一次 retain，那么 myView 保留的 UIView 的对象指针仍然有效。
[instance release] ;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>使用 @property 配合 @synthesize 可以让编译器自动实现 getter/setter 方法，使用的时候也很方便，可以直接使用 “对象.属性” 的方法调用；如果我们想要 “对象.方法” 的方式来调用一个方法并获取到方法的返回值，那就需要使用 @property 配合 @dynamic 了。  </p>
<p>使用 @dynamic 关键字是告诉编译器由我们自己来实现访问方法。如果使用的是 @synthesize，那么这个工作编译器就会帮你实现了。  </p>
<p>readonly 此标记说明属性是只读的，默认的标记是读写，如果你指定了只读，在 @implementation 中只需要一个读取器。或者如果你使用 @synthesize 关键字，也是有读取器方法被解析。而且如果你试图使用点操作符为属性赋值，你将得到一个编译错误。  </p>
<p>readwrite 此标记说明属性会被当成读写的，这也是默认属性。设置器和读取器都需要在 @implementation 中实现。如果使用 @synthesize 关键字，读取器和设置器都会被解析。</p>
<p>nonatomic：非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。如果不加此属性，则默认是两个访问方法都为原子型事务访问。  </p>
<p>atomic 和 nonatomic 用来决定编译器生成的 getter 和 setter 是否为原子操作。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="https://treylin.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[It's life.]]></title>
    <link href="https://treylin.me/2013/01/29/ni-xiang-yao-de-sheng-huo/"/>
    <id>https://treylin.me/2013/01/29/ni-xiang-yao-de-sheng-huo/</id>
    <published>2013-01-29T02:43:00.000Z</published>
    <updated>2015-10-16T16:21:37.000Z</updated>
    <content type="html"><![CDATA[<p>这阵子，生活中影响比较大的，有一个人和一件事。  </p>
<p>####一个人，这个人，我不认识。  </p>
<p>周末习惯要出去走走，不会太晚起床，哪怕是比前天晚上预期的起床时间晚了半小时，也会感到懊恼，这不会是什么焦虑症的前兆吧。以前挺喜欢热闹的，哪人多往哪钻。后来心态变了，不喜欢人太多的地方。上个周末，找了家咖啡馆，勉强消费得起。带了电脑，一坐，就是一个美好的下午。靠着墙坐，是玻璃幕墙，外面的行人车辆一清二楚。<br><a id="more"></a> </p>
<p><img src="http://7xng37.com1.z0.glb.clouddn.com/Streetsinger.JPG" alt="street singer" title="Singer">  </p>
<p>这个人，便是我在度过这个闲适的下午之后遇见的。他是一个卖唱的原创歌手，带着一把吉他，坐在树下。我这是第一次在街头看见卖唱的<code>原创</code>歌手。之前在街头看到卖唱的，大都是身有残疾，或者有什么家庭事故，遭遇了不幸的。他们在卖唱的时候，眉头一般都是紧缩的，一脸愁容，歌声在这个时候，只是他们用来博人同情的工具。而这个原创歌手很不一样。我路过的时候，他正在用不太标准的粤语唱着 Beyond 的《海阔天空》。摇著头，头发随着舞动，手在吉他前欢快的扫着，最重要的是，他的嘴角是上扬的，给我感觉是，他不是在卖唱，他是在享受音乐，路人也很享受，这是他的一场小型演唱会。听着听着，我竟然一身鸡皮疙瘩。下一首，他换了自己的一首原创歌曲，有句歌词大概有这样的一句：“人们买房买车买不断的欲望...” 歌词大意是在讽刺那些当今社会物欲横流的现象，以及描述他自己理想的生活。唱得比刚才那首还卖力。旁边一个二十来岁小姑娘很激动，眼里好像泛着泪光。曲毕，她走上前和歌手交谈，像之前熟悉的朋友。末了，小姑娘从钱包里掏出一百元，塞进了歌手手里。歌手没有太大推脱，他们相视，笑笑，歌手收下了钱，用一首《奔跑》，目送了小姑娘。他们估计以前都是歌手，是一个 band 的，又或者有其他情况，这个我不得而知，但是此情此景，每个热爱音乐，向往自由的人，都会动容吧。第一次觉得，街边卖唱是这么好听，我也是第一次掏出钱，给了街边卖唱的歌手。心里很受震撼，回去的路上，脑海里一直是歌手坐树下，轻抚琴弦的模样。我开始考虑自己的生活。  </p>
<p>一件事的话是，新学期，我决定将我大部分的时间放在校园。准备静下心，继续修炼。  </p>
<blockquote>
<p>Life is short, play, enjoy it.  </p>
</blockquote>
<p>:-)  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这阵子，生活中影响比较大的，有一个人和一件事。  </p>
<p>####一个人，这个人，我不认识。  </p>
<p>周末习惯要出去走走，不会太晚起床，哪怕是比前天晚上预期的起床时间晚了半小时，也会感到懊恼，这不会是什么焦虑症的前兆吧。以前挺喜欢热闹的，哪人多往哪钻。后来心态变了，不喜欢人太多的地方。上个周末，找了家咖啡馆，勉强消费得起。带了电脑，一坐，就是一个美好的下午。靠着墙坐，是玻璃幕墙，外面的行人车辆一清二楚。<br>]]>
    
    </summary>
    
      <category term="Life" scheme="https://treylin.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[心态的转变]]></title>
    <link href="https://treylin.me/2013/01/27/xin-tai-de-zhuan-bian/"/>
    <id>https://treylin.me/2013/01/27/xin-tai-de-zhuan-bian/</id>
    <published>2013-01-27T09:31:00.000Z</published>
    <updated>2013-03-03T04:50:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>读书，旅行，心灵，身体，总有一个要在路上。  </p>
</blockquote>
<p>:-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>读书，旅行，心灵，身体，总有一个要在路上。  </p>
</blockquote>
<p>:-)</p>
]]>
    </summary>
    
      <category term="Life" scheme="https://treylin.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[about self = [super init]]]></title>
    <link href="https://treylin.me/2013/01/11/about-self-super-init/"/>
    <id>https://treylin.me/2013/01/11/about-self-super-init/</id>
    <published>2013-01-11T07:06:00.000Z</published>
    <updated>2013-11-11T07:13:26.000Z</updated>
    <content type="html"><![CDATA[<p>先看一下官方文档给出的初始化示例代码：</p>
<pre><code>- (id)<span class="keyword">init</span> {  
   <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];  <span class="comment">// Call a designated initializer here.  </span>
   <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) {  
         <span class="comment">// 省略其他细节  </span>
   }  
   <span class="keyword">return</span> <span class="keyword">self</span>;  
}  
</code></pre><p>容易让人困惑的地方在于，将父类初始化之后，将其返回的对象指针覆盖当前对象的指针。<br>这种方式令人费解，目前暂时找不到官方解释这么做的原因。<br><a id="more"></a></p>
<p>官方文档 有解释。<br>我们先分以下几种情况分别分析：（假设superSelf是[super init]的返回值）</p>
<pre><code>superSelf == <span class="literal">nil</span>
</code></pre><p>此时父类初始化失败，self随之被赋值为nil并返回，表现正常。</p>
<pre><code>superSelf == <span class="keyword">self</span>
</code></pre><p>大部分类的初始化都是这个结果。此时赋值没有任何影响。 </p>
<pre><code>superSelf != <span class="keyword">self</span>
</code></pre><p>这种情况正是大部分人疑惑的地方。执行 self = [super init] 之后，我们创建的对象将会被重定向到另外一块内存上。接下来重点解释这种情况。</p>
<p>首先，出现父类指针跟子类指针不一样的情况其实就是父类的init方法返回的对象跟原先创建的对象不一样，分为以下几种：<br>1 单件。<br>此时如果执行 self = [super init] 将使所有子类指向这个单件的内存。<br>这不仅使所有子类互相修改数据，甚至访问子类自己增加的变量的时候，可能会崩溃。<br>建议不要继承单件、或者保证单件的子类也是单件。<br>2 ClassClusters（类簇），初始化方法返回了不同的子类。<br>以下是对象初始化后，返回不同的子类的例子：</p>
<pre><code><span class="built_in">NSString</span> *str1 = [<span class="built_in">NSString</span> alloc];  
<span class="built_in">NSString</span> *str2 = [str1 initWithString:<span class="string">@"hello"</span>];  
</code></pre><p>上面的str1和str2是不一样的对象，存在于不同的内存块中，在GNUStep里面，str1是GSPlaceholderString对象，str2是GSCInlineString对象。<br>3 共享。<br>先看例子：  </p>
<pre><code>NSNumber *n1 = <span class="comment">[<span class="comment">[NSNumber alloc]</span> initWithInt:1]</span>;  
NSNumber *n2 = <span class="comment">[<span class="comment">[NSNumber alloc]</span> initWithInt:1]</span>;  
</code></pre><p>以上的n1和n2，指向了同一块内存！<br>由于NSNumber是创建之后就不能修改的对象，所以Foundation在这里做了一些优化，相同数值的NSNumber对象将共享同一块内存。<br>4 父类可能在初始化中释放了当前的对象并创建了新的内存区域。<br>这时，子类需要将self指向新的内存区域才能正常工作。所以一定要执行self = [super init];</p>
<p>###总结：<br>在初始化方法中使用self = [super init]语句是Objective-C的标准做法。<br>一般情况下都要用以上语句来防止父类改变对象的内存地址导致self指针指向无效内存。<br>在父类是单件、类簇或者有共享资源的时候，必须依照实际情况考虑是否加上这行代码。<br>总之，当需要继承父类的时候，调用父类的init之前，必须知道父类的init方法的工作方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先看一下官方文档给出的初始化示例代码：</p>
<pre><code>- (id)<span class="keyword">init</span> {  
   <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];  <span class="comment">// Call a designated initializer here.  </span>
   <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) {  
         <span class="comment">// 省略其他细节  </span>
   }  
   <span class="keyword">return</span> <span class="keyword">self</span>;  
}  
</code></pre><p>容易让人困惑的地方在于，将父类初始化之后，将其返回的对象指针覆盖当前对象的指针。<br>这种方式令人费解，目前暂时找不到官方解释这么做的原因。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="https://treylin.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS应用开发最佳实践系列一：编写高质量的Objective-C代码「转载」]]></title>
    <link href="https://treylin.me/2012/12/20/iosying-yong-kai-fa-zui-jia-shi-jian-xi-lie-1-bian-xie-gao-zhi-liang-de-objective-cdai-ma-zhuan-zai/"/>
    <id>https://treylin.me/2012/12/20/iosying-yong-kai-fa-zui-jia-shi-jian-xi-lie-1-bian-xie-gao-zhi-liang-de-objective-cdai-ma-zhuan-zai/</id>
    <published>2012-12-20T06:47:00.000Z</published>
    <updated>2013-11-11T07:14:15.000Z</updated>
    <content type="html"><![CDATA[<p>「文章出处: <a href="http://www.cnblogs.com/xdream86/p/3309345.html」" target="_blank" rel="external">http://www.cnblogs.com/xdream86/p/3309345.html」</a>  </p>
<p>###点标记语法</p>
<p>属性和幂等方法（多次调用和一次调用返回的结果相同）使用点标记语法访问，其他的情况使用方括号标记语法。<br>良好的风格： </p>
<pre><code>view.backgroundColor = <span class="string">[UIColor orangeColor]</span>;
<span class="string">[UIApplication sharedApplication]</span>.delegate;
</code></pre><p>不良的风格：</p>
<pre><code><span class="attr_selector">[view setBackgroundColor:[UIColor orangeColor]</span>];
<span class="tag">UIApplication</span><span class="class">.sharedApplication</span><span class="class">.delegate</span>;
</code></pre><a id="more"></a>
<p>###间距<br>二元运算符和参数之间需要放置一个空格，一元运算符、强制类型转换和参数之间不放置空格。关键字之后圆括号之前需要放置一个空格。  </p>
<pre><code><span class="keyword">void</span> *ptr = &amp;value + <span class="number">10</span> * <span class="number">3</span>;    
NewType a = (NewType)b;

<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {
    doCoolThings();
}
</code></pre><p>数组和字典类型的字面值的方括号两边各放置一个空格。  </p>
<pre><code>NSArray *theShit = <span class="constant">@[</span> <span class="constant">@1</span>, <span class="constant">@2</span>, <span class="constant">@3</span> ]<span class="comment">;</span>
</code></pre><p>字典字面值的键和冒号之间没有空格，冒号和值之间有一个空格。  </p>
<pre><code>NSDictionary <span class="keyword">*</span>keyedShit = <span class="comment">@{ GHDidCreateStyleGuide: @YES };</span>
</code></pre><p>C函数声明中，左括号的前面不保留空格，并且函数名应该像类一样带有命名空间标识。<br>良好的风格：  </p>
<pre><code><span class="function"><span class="keyword">void</span> <span class="title">RNCWesomeFunction</span><span class="params">(BOOL hasSomeArgs)</span></span>;  
</code></pre><p>长的字面值应被拆分为多行。<br>良好的风格：  </p>
<pre><code><span class="built_in">NSArray</span> *theShit = @[
    <span class="string">@"Got some long string objects in here."</span>,
    [AndSomeModelObjects too],
    <span class="string">@"Moar strings."</span>
];


<span class="built_in">NSDictionary</span> *keyedShit = @{
    <span class="string">@"this.key"</span>: <span class="string">@"corresponds to this value"</span>,
    <span class="string">@"otherKey"</span>: <span class="string">@"remoteData.payload"</span>,
    <span class="string">@"some"</span>: <span class="string">@"more"</span>,
    <span class="string">@"JSON"</span>: <span class="string">@"keys"</span>,
    <span class="string">@"and"</span>: <span class="string">@"stuff"</span>,
};
</code></pre><p>每一行代码使用4个空格缩进。不使用tab缩进。下图是在Xcode的Preferences进行缩进设置的截图。  </p>
<p>方法签名以及其他关键字（if/else/switch/while等）后面跟随的左花括号总是和语句出现于同一行，而右花括号独占一行。<br>良好的风格：  </p>
<pre><code><span class="keyword">if</span> (user.isHappy) {
//<span class="keyword">Do</span> something
}

<span class="keyword">else</span> {
//<span class="keyword">Do</span> something <span class="keyword">else</span>
}
</code></pre><p>如果一个方法内有多个功能区域，可以使用空行分隔功能区域。<br>每一行代码不要超过100个字符。<br>每一个方法之前都有一个99字符宽的注释行，注释行相对于使用空行更能提高代码的辨识度，当一行代码很长的时候，注释行也起到了越界检测的作用。注释行：<br>    //////////////////////////////////////////////////////////////////////////////////////////////////  </p>
<p>###条件语句<br>所有的逻辑块必须使用花括号包围，即使条件体只需编写一行代码也必须使用花括号。<br>良好的风格做法：</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>「文章出处: <a href="http://www.cnblogs.com/xdream86/p/3309345.html」">http://www.cnblogs.com/xdream86/p/3309345.html」</a>  </p>
<p>###点标记语法</p>
<p>属性和幂等方法（多次调用和一次调用返回的结果相同）使用点标记语法访问，其他的情况使用方括号标记语法。<br>良好的风格： </p>
<pre><code>view.backgroundColor = <span class="string">[UIColor orangeColor]</span>;
<span class="string">[UIApplication sharedApplication]</span>.delegate;
</code></pre><p>不良的风格：</p>
<pre><code><span class="attr_selector">[view setBackgroundColor:[UIColor orangeColor]</span>];
<span class="tag">UIApplication</span><span class="class">.sharedApplication</span><span class="class">.delegate</span>;
</code></pre>]]>
    
    </summary>
    
      <category term="iOS" scheme="https://treylin.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[添加 DISQUS 评论功能]]></title>
    <link href="https://treylin.me/2012/10/24/tian-jia-disqus-ping-lun-gong-neng/"/>
    <id>https://treylin.me/2012/10/24/tian-jia-disqus-ping-lun-gong-neng/</id>
    <published>2012-10-24T14:02:00.000Z</published>
    <updated>2013-03-03T04:49:45.000Z</updated>
    <content type="html"><![CDATA[<p>博客建好，晾好几天了，抽了点空添加了评论系统。<br>DISQUS 无疑是首选，先到 <a href="http://http://disqus.com" target="_blank" rel="external">官网</a> 注册，添加 blog 域名，获得一个 shortname，这个可以先 copy 下来，下面要用。接下来到 ~/octopress 目录下编辑 _config.yml 文件，在<br>    disqus_short_name: (键下刚才的 shortname)<br>下面的<br>    dispus_show_comment_count: true<br>终端里<br><a id="more"></a><br>    rake generate<br>    rake preview<br>没啥问题的话，<br>    rake deploy<br>Ok, Done. :-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>博客建好，晾好几天了，抽了点空添加了评论系统。<br>DISQUS 无疑是首选，先到 <a href="http://http://disqus.com">官网</a> 注册，添加 blog 域名，获得一个 shortname，这个可以先 copy 下来，下面要用。接下来到 ~/octopress 目录下编辑 _config.yml 文件，在<br>    disqus_short_name: (键下刚才的 shortname)<br>下面的<br>    dispus_show_comment_count: true<br>终端里<br>]]>
    
    </summary>
    
      <category term="About-blog" scheme="https://treylin.me/categories/About-blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blog]]></title>
    <link href="https://treylin.me/2012/10/20/first-blog/"/>
    <id>https://treylin.me/2012/10/20/first-blog/</id>
    <published>2012-10-20T09:30:00.000Z</published>
    <updated>2013-03-03T09:36:56.000Z</updated>
    <content type="html"><![CDATA[<p>用了点时间，终于搭好这个 blog。<br>这个框架非常简洁，感觉比 Wordpress 好用，以后写博客就可以用 Markdown 语法, 不用去太在意文章的排版，专注于写的东西本身了。:-)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用了点时间，终于搭好这个 blog。<br>这个框架非常简洁，感觉比 Wordpress 好用，以后写博客就可以用 Markdown 语法, 不用去太在意文章的排版，专注于写的东西本身了。:-)</p>
]]>
    </summary>
    
      <category term="About-blog" scheme="https://treylin.me/categories/About-blog/"/>
    
  </entry>
  
</feed>
